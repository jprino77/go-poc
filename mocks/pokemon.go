// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/pokemon.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	"github.com/jprino77/go-poc/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPokemonRepository is a mock of PokemonRepository interface.
type MockPokemonRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPokemonRepositoryMockRecorder
}

// MockPokemonRepositoryMockRecorder is the mock recorder for MockPokemonRepository.
type MockPokemonRepositoryMockRecorder struct {
	mock *MockPokemonRepository
}

// NewMockPokemonRepository creates a new mock instance.
func NewMockPokemonRepository(ctrl *gomock.Controller) *MockPokemonRepository {
	mock := &MockPokemonRepository{ctrl: ctrl}
	mock.recorder = &MockPokemonRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPokemonRepository) EXPECT() *MockPokemonRepositoryMockRecorder {
	return m.recorder
}

// GetPokemonById mocks base method.
func (m *MockPokemonRepository) GetPokemonById(ctx context.Context, id int) (*domain.Pokemon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPokemonById", ctx, id)
	ret0, _ := ret[0].(*domain.Pokemon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPokemonById indicates an expected call of GetPokemonById.
func (mr *MockPokemonRepositoryMockRecorder) GetPokemonById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPokemonById", reflect.TypeOf((*MockPokemonRepository)(nil).GetPokemonById), ctx, id)
}

// MockPokemonSrv is a mock of PokemonSrv interface.
type MockPokemonSrv struct {
	ctrl     *gomock.Controller
	recorder *MockPokemonSrvMockRecorder
}

// MockPokemonSrvMockRecorder is the mock recorder for MockPokemonSrv.
type MockPokemonSrvMockRecorder struct {
	mock *MockPokemonSrv
}

// NewMockPokemonSrv creates a new mock instance.
func NewMockPokemonSrv(ctrl *gomock.Controller) *MockPokemonSrv {
	mock := &MockPokemonSrv{ctrl: ctrl}
	mock.recorder = &MockPokemonSrvMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPokemonSrv) EXPECT() *MockPokemonSrvMockRecorder {
	return m.recorder
}

// GetPokemonBy mocks base method.
func (m *MockPokemonSrv) GetPokemonBy(ctx context.Context, id int) (*domain.Pokemon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPokemonBy", ctx, id)
	ret0, _ := ret[0].(*domain.Pokemon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPokemonBy indicates an expected call of GetPokemonBy.
func (mr *MockPokemonSrvMockRecorder) GetPokemonBy(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPokemonBy", reflect.TypeOf((*MockPokemonSrv)(nil).GetPokemonBy), ctx, id)
}
